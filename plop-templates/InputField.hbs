<script setup lang="ts">
import { ref, computed } from "vue";

const props = defineProps({
  disabled: {
    type: Boolean,
    default() {
      return false;
    },
  },
  label: {
    type: String,
    default() {
      return "Title";
    },
  },
  helperText: {
    type: String,
    default() {
      return null;
    },
  },
  errorText: {
    type: String,
    default() {
      return null;
    },
  },
  password: {
    type: Boolean,
    default() {
      return false;
    },
  },
  date: {
    type: Boolean,
    default() {
      return false;
    },
  },
  radio: {
    type: Boolean,
    default() {
      return false;
    },
  },
  error: {
    type: Boolean,
    default() {
      return true;
    },
  },
  variant: {
    type: String,
    default() {
      return "general";
    },
  },
  modelValue: {
    type: String,
    default: "",
    required: true,
  },
});

const emit = defineEmits(["update:modelValue"]);

const hidePassword = ref(true);
const firstInput = ref(true);

const updateValue = (event: Event) => {
  const target = event.target as HTMLInputElement;
  emit("update:modelValue", target?.value);
};

const inputClasses = computed(() => {
  const arrayClasses: Array<string> = [];
  return arrayClasses;
});

const inputContainerClasses = computed(() => {
  const arrayClasses: Array<string> = [""];

  switch (props.variant) {
    case "outlined":
      arrayClasses.push("border-2 rounded-xl px-4");
      break;
    case "underlined":
      arrayClasses.push("border-b-2");
    default:
      break;
  }

  if (props.errorText) {
    arrayClasses.push("border-red-500");
  }
  return arrayClasses;
});
</script>

<template>
  <div
    v-bind="$attrs"
    class="inline-block py-2 border-white relative"
    :class="inputContainerClasses"
  >
    <input
      v-bind="$attrs"
      :type="hidePassword ? $attrs.type : props.type"
      :min-length="$attrs.minlength"
      :style="!!$slots['post-icon'] ? 'width: 90%' : ''"
      :maximum-scale="computedMaximumScale"
      :user-scalable="computedUserScalable"
      placeholder=""
      :disabled="disabled"
      :value="modelValue"
      @input="updateValue"
      :class="inputClasses"
      class="md-input"
    />
    <label for="fullName" class="md-label">{{ label }}</label>

    <div
      v-if="$attrs.type === 'password'"
      class="absolute top-0 right-4 h-full flex items-center justify-center mr-1 cursor-pointer"
      :class="error ? 'text-red-secondary' : 'text-white'"
      @click="hidePassword = !hidePassword"
    >
      <svg
        v-if="hidePassword"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="white"
        class="size-6"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
        />
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
        />
      </svg>
      <svg
        v-else
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="white"
        class="size-6"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88"
        />
      </svg>
    </div>
  </div>
  <div>
    <div
      v-if="errorText && firstInput"
      class="text-xs mb-0 text-red-500 leading-5"
    >
      {{ props.errorText }}
    </div>
    <div v-if="helperText" class="text-xxs opacity-50 text-white">
      {{ props.helperText }}
    </div>
  </div>
</template>

<style lang="scss" scoped>
input:focus {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.md-label {
  @apply absolute pointer-events-none block text-sm text-gray-400 bg-black px-2 rounded-full;
  display: block;
  position: absolute;
  pointer-events: none;
  transform-origin: top left;
  transform: translate(0, -30px) scale(1);
  transition: color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
    transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
  margin-top: 9px;
}

.md-input {
  @apply bg-transparent text-white;
}

.md-label-focus {
  @apply text-white;
  transform: translate(0, -65px) scale(0.75);
  transform-origin: top left;
}

.md-input:focus ~ .md-input-underline:after {
  transform: scaleX(1);
}
.md-input:focus + .md-label,
.md-input:not(:placeholder-shown) + .md-label {
  @apply md-label-focus;
  transform: translate(-8px, -50px) scale(0.75);
  transform-origin: top left;
}
</style>
