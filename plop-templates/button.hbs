<template>
  <button
    @click.stop="onClick($event)"
    :class="classes"
    :disabled="attrs.disabled === 'true' || props.loading"
  >
    <div v-show="!props.loading"><slot></slot></div>
    <div v-show="props.loading" class="loader mt-2"></div>
  </button>
</template>
<script setup lang="ts">
import { computed } from 'vue'
import { useAttrs } from 'vue'

const attrs = useAttrs()

interface IProps {
  variant: 'primary' | 'secondary' | 'tertiary'
  size: 'small' | 'medium' | 'large' | 'extra'
  buttonStyle?: 'round' | 'square'
  loading?: boolean
}

const props = withDefaults(defineProps<IProps>(), {
  variant: 'primary',
  size: 'medium',
  buttonStyle: 'round',
  loading: false,
});

const createRipple = (event: MouseEvent) => {
  const button = event.currentTarget as HTMLElement;
  const ripple = document.createElement("span");

  // Get button dimensions
  const rect = button.getBoundingClientRect();
  const size = Math.max(rect.width, rect.height);
  const x = event.clientX - rect.left - size / 2;
  const y = event.clientY - rect.top - size / 2;

  // Apply styles for the ripple effect
  ripple.style.position = "absolute";
  ripple.style.width = `${size}px`;
  ripple.style.height = `${size}px`;
  ripple.style.left = `${x}px`;
  ripple.style.top = `${y}px`;
  ripple.style.background = "rgba(255, 255, 255, 0.5)";
  ripple.style.borderRadius = "50%";
  ripple.style.transform = "scale(0)";
  ripple.style.animation = "ripple-animation 0.8s linear";
  ripple.style.pointerEvents = "none";
  ripple.classList.add("ripple");

  button.appendChild(ripple);

  // Remove ripple after animation
  setTimeout(() => ripple.remove(), 800);
};

const emit = defineEmits<{
  (event: 'click', message?: any): void;
}>();

const onClick = (event: MouseEvent) => {
  createRipple(event)
  emit('click')
}


const classes = computed(() => {
  const variant: string = `btn-${props.variant}`
  const arrayClass: Array<string> = []
  arrayClass.push(variant)

  if (attrs.disabled) {
    arrayClass.push('opacity-20 cursor-not-allowed')
  }

  switch (props.buttonStyle) {
  case 'round':
    arrayClass.push('rounded-full') // Ensure it's added
    break;
  default:
    arrayClass.push('rounded-md') // Default shape
    break;
}

  if (props.loading) {
    arrayClass.push('cursor-wait')
  }
  return arrayClass
})
</script>

<style lang="scss">
.btn-primary {
  @apply border-button-border-primary hover:border-button-border-hover-primary bg-button-bg-primary hover:shadow-none hover:bg-button-bg-hover-primary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-button-ring-focus-primary items-center block px-10 py-2 font-normal text-center text-button-text-primary transition duration-300 ease-in-out transform border ;
}

.btn-secondary {
  @apply text-ultramarine  hover:border-ultramarine focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ultramarine hover:shadow-none items-center block px-10 py-2 text-base font-normal text-center transition duration-300 ease-in-out transform bg-white border-2 rounded-md;
}

.btn-tertiary {
  @apply border-gun bg-gun hover:shadow-none hover:bg-river focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-river hover:border-river items-center block px-10 py-2 font-normal text-center text-white transition duration-300 ease-in-out transform border-2 rounded-md;
}

.loader {
  @apply border-gray-400 w-4 h-4 border-2 border-b-[#ff3d00] rounded-full;

  animation: rotation 1s linear infinite;
}

@keyframes rotation {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes ripple-animation {
  to {
    transform: scale(4);
    opacity: 0;
  }
}

</style>
